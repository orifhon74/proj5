Success: no semantic error is found.

================================================================================
Code with indentations:
func printstack::bool(stk::num[])
begin
    var num::i;
    var num[]::arr;
    arr := new num[stk[1.0]];
    i := 0.0;
    while i < arr.size
    begin
        arr[i] := stk[i + 2.0];
        i := i + 1.0;
    end
    print arr;
    return true;
end
func push::bool(stk::num[], val::num)
begin
    stk[1.0] := stk[1.0] + 1.0;
    stk[stk[1.0] + 1.0] := val;
    return true;
end
func pop::num(stk::num[])
begin
    var num::top;
    top := stk[stk[1.0] + 1.0];
    stk[1.0] := stk[1.0] - 1.0;
    return top;
end
func printhanoi_sel::bool(sel::num, peg_a::num[], peg_b::num[], peg_c::num[])
begin
    var bool::gbg;
    if sel = peg_a[0.0] then
        gbg := printstack(peg_a);
    else
    end
    if sel = peg_b[0.0] then
        gbg := printstack(peg_b);
    else
    end
    if sel = peg_c[0.0] then
        gbg := printstack(peg_c);
    else
    end
    return true;
end
func printhanoi::bool(peg_a::num[], peg_b::num[], peg_c::num[])
begin
    var bool::gbg;
    gbg := printhanoi_sel(1.0,peg_a,peg_b,peg_c);
    gbg := printhanoi_sel(2.0,peg_a,peg_b,peg_c);
    gbg := printhanoi_sel(3.0,peg_a,peg_b,peg_c);
    print 9.99999999999999;
    return true;
end
func hanoi::num(n::num, start::num[], aux::num[], target::num[])
begin
    var num::step;
    var bool::gbg;
    step := 0.0;
    if n > 0.0 then
        step := step + hanoi(n - 1.0,start,target,aux);
        gbg := push(target,pop(start));
        gbg := printhanoi(start,aux,target);
        step := step + 1.0;
        step := step + hanoi(n - 1.0,aux,start,target);
    else
    end
    return step;
end
func main::num()
begin
    var num[]::peg_a;
    var num[]::peg_b;
    var num[]::peg_c;
    var num::n;
    var num::i;
    var num::steps;
    var bool::gbg;
    peg_a := new num[10.0];
    peg_a[0.0] := 1.0;
    peg_a[1.0] := 0.0;
    peg_b := new num[10.0];
    peg_b[0.0] := 2.0;
    peg_b[1.0] := 0.0;
    peg_c := new num[10.0];
    peg_c[0.0] := 3.0;
    peg_c[1.0] := 0.0;
    n := 5.0;
    peg_a[1.0] := n;
    i := 0.0;
    while i < n
    begin
        peg_a[i + 2.0] := n - i;
        i := i + 1.0;
    end
    gbg := printhanoi(peg_a,peg_b,peg_c);
    steps := hanoi(n,peg_a,peg_b,peg_c);
    print steps;
    return 1.0;
end
================================================================================
Code with indentations and comments for running environment:
func printstack::bool(stk::num[])
// relative address of parameter stk from this function call base pointer is -1
begin
    var num::i; // relative address of local variable i from this func call base pointer is 1
    var num[]::arr; // relative address of local variable arr from this func call base pointer is 2
    arr{addr:2} := new num[stk[1.0]];
    i{addr:1} := 0.0;
    while i{addr:1} < arr.size
    begin
        arr{addr:2}[i{addr:1}] := stk[i{addr:1} + 2.0];
        i{addr:1} := i{addr:1} + 1.0;
    end
    print arr{addr:2};
    return true;
end
func push::bool(stk::num[], val::num)
// relative address of parameter stk from this function call base pointer is -1
// relative address of parameter val from this function call base pointer is -2
begin
    stk{addr:-1}[1.0] := stk[1.0] + 1.0;
    stk{addr:-1}[stk[1.0] + 1.0] := val{addr:-2};
    return true;
end
func pop::num(stk::num[])
// relative address of parameter stk from this function call base pointer is -1
begin
    var num::top; // relative address of local variable top from this func call base pointer is 1
    top{addr:1} := stk[stk[1.0] + 1.0];
    stk{addr:-1}[1.0] := stk[1.0] - 1.0;
    return top{addr:1};
end
func printhanoi_sel::bool(sel::num, peg_a::num[], peg_b::num[], peg_c::num[])
// relative address of parameter sel from this function call base pointer is -1
// relative address of parameter peg_a from this function call base pointer is -2
// relative address of parameter peg_b from this function call base pointer is -3
// relative address of parameter peg_c from this function call base pointer is -4
begin
    var bool::gbg; // relative address of local variable gbg from this func call base pointer is 1
    if sel{addr:-1} = peg_a[0.0] then
        gbg{addr:1} := printstack(peg_a{addr:-2});
    else
    end
    if sel{addr:-1} = peg_b[0.0] then
        gbg{addr:1} := printstack(peg_b{addr:-3});
    else
    end
    if sel{addr:-1} = peg_c[0.0] then
        gbg{addr:1} := printstack(peg_c{addr:-4});
    else
    end
    return true;
end
func printhanoi::bool(peg_a::num[], peg_b::num[], peg_c::num[])
// relative address of parameter peg_a from this function call base pointer is -1
// relative address of parameter peg_b from this function call base pointer is -2
// relative address of parameter peg_c from this function call base pointer is -3
begin
    var bool::gbg; // relative address of local variable gbg from this func call base pointer is 1
    gbg{addr:1} := printhanoi_sel(1.0,peg_a{addr:-1},peg_b{addr:-2},peg_c{addr:-3});
    gbg{addr:1} := printhanoi_sel(2.0,peg_a{addr:-1},peg_b{addr:-2},peg_c{addr:-3});
    gbg{addr:1} := printhanoi_sel(3.0,peg_a{addr:-1},peg_b{addr:-2},peg_c{addr:-3});
    print 9.99999999999999;
    return true;
end
func hanoi::num(n::num, start::num[], aux::num[], target::num[])
// relative address of parameter n from this function call base pointer is -1
// relative address of parameter start from this function call base pointer is -2
// relative address of parameter aux from this function call base pointer is -3
// relative address of parameter target from this function call base pointer is -4
begin
    var num::step; // relative address of local variable step from this func call base pointer is 1
    var bool::gbg; // relative address of local variable gbg from this func call base pointer is 2
    step{addr:1} := 0.0;
    if n{addr:-1} > 0.0 then
        step{addr:1} := step{addr:1} + hanoi(n{addr:-1} - 1.0,start{addr:-2},target{addr:-4},aux{addr:-3});
        gbg{addr:2} := push(target{addr:-4},pop(start{addr:-2}));
        gbg{addr:2} := printhanoi(start{addr:-2},aux{addr:-3},target{addr:-4});
        step{addr:1} := step{addr:1} + 1.0;
        step{addr:1} := step{addr:1} + hanoi(n{addr:-1} - 1.0,aux{addr:-3},start{addr:-2},target{addr:-4});
    else
    end
    return step{addr:1};
end
func main::num()
begin
    var num[]::peg_a; // relative address of local variable peg_a from this func call base pointer is 1
    var num[]::peg_b; // relative address of local variable peg_b from this func call base pointer is 2
    var num[]::peg_c; // relative address of local variable peg_c from this func call base pointer is 3
    var num::n; // relative address of local variable n from this func call base pointer is 4
    var num::i; // relative address of local variable i from this func call base pointer is 5
    var num::steps; // relative address of local variable steps from this func call base pointer is 6
    var bool::gbg; // relative address of local variable gbg from this func call base pointer is 7
    peg_a{addr:1} := new num[10.0];
    peg_a{addr:1}[0.0] := 1.0;
    peg_a{addr:1}[1.0] := 0.0;
    peg_b{addr:2} := new num[10.0];
    peg_b{addr:2}[0.0] := 2.0;
    peg_b{addr:2}[1.0] := 0.0;
    peg_c{addr:3} := new num[10.0];
    peg_c{addr:3}[0.0] := 3.0;
    peg_c{addr:3}[1.0] := 0.0;
    n{addr:4} := 5.0;
    peg_a{addr:1}[1.0] := n{addr:4};
    i{addr:5} := 0.0;
    while i{addr:5} < n{addr:4}
    begin
        peg_a{addr:1}[i{addr:5} + 2.0] := n{addr:4} - i{addr:5};
        i{addr:5} := i{addr:5} + 1.0;
    end
    gbg{addr:7} := printhanoi(peg_a{addr:1},peg_b{addr:2},peg_c{addr:3});
    steps{addr:6} := hanoi(n{addr:4},peg_a{addr:1},peg_b{addr:2},peg_c{addr:3});
    print steps{addr:6};
    return 1.0;
end
================================================================================
Execute:
[5.0, 4.0, 3.0, 2.0, 1.0]
[]
[]
9.99999999999999
[5.0, 4.0, 3.0, 2.0]
[]
[1.0]
9.99999999999999
[5.0, 4.0, 3.0]
[2.0]
[1.0]
9.99999999999999
[5.0, 4.0, 3.0]
[2.0, 1.0]
[]
9.99999999999999
[5.0, 4.0]
[2.0, 1.0]
[3.0]
9.99999999999999
[5.0, 4.0, 1.0]
[2.0]
[3.0]
9.99999999999999
[5.0, 4.0, 1.0]
[]
[3.0, 2.0]
9.99999999999999
[5.0, 4.0]
[]
[3.0, 2.0, 1.0]
9.99999999999999
[5.0]
[4.0]
[3.0, 2.0, 1.0]
9.99999999999999
[5.0]
[4.0, 1.0]
[3.0, 2.0]
9.99999999999999
[5.0, 2.0]
[4.0, 1.0]
[3.0]
9.99999999999999
[5.0, 2.0, 1.0]
[4.0]
[3.0]
9.99999999999999
[5.0, 2.0, 1.0]
[4.0, 3.0]
[]
9.99999999999999
[5.0, 2.0]
[4.0, 3.0]
[1.0]
9.99999999999999
[5.0]
[4.0, 3.0, 2.0]
[1.0]
9.99999999999999
[5.0]
[4.0, 3.0, 2.0, 1.0]
[]
9.99999999999999
[]
[4.0, 3.0, 2.0, 1.0]
[5.0]
9.99999999999999
[1.0]
[4.0, 3.0, 2.0]
[5.0]
9.99999999999999
[1.0]
[4.0, 3.0]
[5.0, 2.0]
9.99999999999999
[]
[4.0, 3.0]
[5.0, 2.0, 1.0]
9.99999999999999
[3.0]
[4.0]
[5.0, 2.0, 1.0]
9.99999999999999
[3.0]
[4.0, 1.0]
[5.0, 2.0]
9.99999999999999
[3.0, 2.0]
[4.0, 1.0]
[5.0]
9.99999999999999
[3.0, 2.0, 1.0]
[4.0]
[5.0]
9.99999999999999
[3.0, 2.0, 1.0]
[]
[5.0, 4.0]
9.99999999999999
[3.0, 2.0]
[]
[5.0, 4.0, 1.0]
9.99999999999999
[3.0]
[2.0]
[5.0, 4.0, 1.0]
9.99999999999999
[3.0]
[2.0, 1.0]
[5.0, 4.0]
9.99999999999999
[]
[2.0, 1.0]
[5.0, 4.0, 3.0]
9.99999999999999
[1.0]
[2.0]
[5.0, 4.0, 3.0]
9.99999999999999
[1.0]
[]
[5.0, 4.0, 3.0, 2.0]
9.99999999999999
[]
[]
[5.0, 4.0, 3.0, 2.0, 1.0]
9.99999999999999
31.0
Returned value by main: 1.0
================================================================================
